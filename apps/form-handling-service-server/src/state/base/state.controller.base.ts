/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StateService } from "../state.service";
import { StateCreateInput } from "./StateCreateInput";
import { State } from "./State";
import { StateFindManyArgs } from "./StateFindManyArgs";
import { StateWhereUniqueInput } from "./StateWhereUniqueInput";
import { StateUpdateInput } from "./StateUpdateInput";
import { FormFindManyArgs } from "../../form/base/FormFindManyArgs";
import { Form } from "../../form/base/Form";
import { FormWhereUniqueInput } from "../../form/base/FormWhereUniqueInput";
import { OrganizationFindManyArgs } from "../../organization/base/OrganizationFindManyArgs";
import { Organization } from "../../organization/base/Organization";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";

export class StateControllerBase {
  constructor(protected readonly service: StateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: State })
  async createState(@common.Body() data: StateCreateInput): Promise<State> {
    return await this.service.createState({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [State] })
  @ApiNestedQuery(StateFindManyArgs)
  async states(@common.Req() request: Request): Promise<State[]> {
    const args = plainToClass(StateFindManyArgs, request.query);
    return this.service.states({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: State })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async state(
    @common.Param() params: StateWhereUniqueInput
  ): Promise<State | null> {
    const result = await this.service.state({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: State })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateState(
    @common.Param() params: StateWhereUniqueInput,
    @common.Body() data: StateUpdateInput
  ): Promise<State | null> {
    try {
      return await this.service.updateState({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: State })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteState(
    @common.Param() params: StateWhereUniqueInput
  ): Promise<State | null> {
    try {
      return await this.service.deleteState({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/forms")
  @ApiNestedQuery(FormFindManyArgs)
  async findForms(
    @common.Req() request: Request,
    @common.Param() params: StateWhereUniqueInput
  ): Promise<Form[]> {
    const query = plainToClass(FormFindManyArgs, request.query);
    const results = await this.service.findForms(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,

        organization: {
          select: {
            id: true,
          },
        },

        state: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/forms")
  async connectForms(
    @common.Param() params: StateWhereUniqueInput,
    @common.Body() body: FormWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      forms: {
        connect: body,
      },
    };
    await this.service.updateState({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/forms")
  async updateForms(
    @common.Param() params: StateWhereUniqueInput,
    @common.Body() body: FormWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      forms: {
        set: body,
      },
    };
    await this.service.updateState({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/forms")
  async disconnectForms(
    @common.Param() params: StateWhereUniqueInput,
    @common.Body() body: FormWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      forms: {
        disconnect: body,
      },
    };
    await this.service.updateState({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/organizations")
  @ApiNestedQuery(OrganizationFindManyArgs)
  async findOrganizations(
    @common.Req() request: Request,
    @common.Param() params: StateWhereUniqueInput
  ): Promise<Organization[]> {
    const query = plainToClass(OrganizationFindManyArgs, request.query);
    const results = await this.service.findOrganizations(params.id, {
      ...query,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        phoneNumber: true,

        state: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        zipCode: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizations")
  async connectOrganizations(
    @common.Param() params: StateWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizations: {
        connect: body,
      },
    };
    await this.service.updateState({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizations")
  async updateOrganizations(
    @common.Param() params: StateWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizations: {
        set: body,
      },
    };
    await this.service.updateState({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizations")
  async disconnectOrganizations(
    @common.Param() params: StateWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizations: {
        disconnect: body,
      },
    };
    await this.service.updateState({
      where: params,
      data,
      select: { id: true },
    });
  }
}
